/*
 * API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.46
 *
 * Do not edit the class manually.
 *
 */
import { ApiClient } from "../ApiClient";
import { TodoDto } from "../model/TodoDto";

/**
 * Todo service.
 * @module api/TodoApi
 * @version 1.0
 */
export class TodoApi {
  /**
    * Constructs a new TodoApi. 
    * @alias module:api/TodoApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
  constructor(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }

  /**
   * Callback function to receive the result of the apiV1TodoGet operation.
   * @callback moduleapi/TodoApi~apiV1TodoGetCallback
   * @param {String} error Error message, if any.
   * @param {Array.<module:model/TodoDto>{ data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * @param {module:api/TodoApi~apiV1TodoGetCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
   */
  apiV1TodoGet(callback) {
    let postBody = null;

    let pathParams = {};
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["text/plain", "application/json", "text/json"];
    let returnType = [TodoDto];

    return this.apiClient.callApi(
      "/api/v1/Todo",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback
    );
  }
  /**
   * Callback function to receive the result of the apiV1TodoIdDelete operation.
   * @callback moduleapi/TodoApi~apiV1TodoIdDeleteCallback
   * @param {String} error Error message, if any.
   * @param {'Boolean'{ data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * @param {Number} id
   * @param {module:api/TodoApi~apiV1TodoIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
   */
  apiV1TodoIdDelete(id, callback) {
    let postBody = null;
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error(
        "Missing the required parameter 'id' when calling apiV1TodoIdDelete"
      );
    }

    let pathParams = {
      id: id,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["text/plain", "application/json", "text/json"];
    let returnType = "Boolean";

    return this.apiClient.callApi(
      "/api/v1/Todo/{id}",
      "DELETE",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback
    );
  }
  /**
   * Callback function to receive the result of the apiV1TodoIdGet operation.
   * @callback moduleapi/TodoApi~apiV1TodoIdGetCallback
   * @param {String} error Error message, if any.
   * @param {module:model/TodoDto{ data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * @param {Number} id
   * @param {module:api/TodoApi~apiV1TodoIdGetCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
   */
  apiV1TodoIdGet(id, callback) {
    let postBody = null;
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error(
        "Missing the required parameter 'id' when calling apiV1TodoIdGet"
      );
    }

    let pathParams = {
      id: id,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["text/plain", "application/json", "text/json"];
    let returnType = TodoDto;

    return this.apiClient.callApi(
      "/api/v1/Todo/{id}",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback
    );
  }
  /**
   * Callback function to receive the result of the apiV1TodoPost operation.
   * @callback moduleapi/TodoApi~apiV1TodoPostCallback
   * @param {String} error Error message, if any.
   * @param {module:model/TodoDto{ data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * @param {Object} opts Optional parameters
   * @param {module:model/CreateTodoDto} opts.body
   * @param {module:api/TodoApi~apiV1TodoPostCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
   */
  apiV1TodoPost(opts, callback) {
    opts = opts || {};
    let postBody = opts["body"];

    let pathParams = {};
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = ["application/json", "text/json", "application/_*+json"];
    let accepts = ["text/plain", "application/json", "text/json"];
    let returnType = TodoDto;

    return this.apiClient.callApi(
      "/api/v1/Todo",
      "POST",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback
    );
  }
  /**
   * Callback function to receive the result of the apiV1TodoPut operation.
   * @callback moduleapi/TodoApi~apiV1TodoPutCallback
   * @param {String} error Error message, if any.
   * @param {module:model/TodoDto{ data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * @param {Object} opts Optional parameters
   * @param {module:model/TodoDto} opts.body
   * @param {module:api/TodoApi~apiV1TodoPutCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
   */
  apiV1TodoPut(opts, callback) {
    opts = opts || {};
    let postBody = opts["body"];

    let pathParams = {};
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = ["application/json", "text/json", "application/_*+json"];
    let accepts = ["text/plain", "application/json", "text/json"];
    let returnType = TodoDto;

    return this.apiClient.callApi(
      "/api/v1/Todo",
      "PUT",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback
    );
  }
}
